package message

import (
	"fmt"

	btss "github.com/binance-chain/tss-lib/tss"
)

type SendMsgChan struct {
	WireMsg   *WireMessage
	PartiesID []uint64
}

type TssMsgType uint8

const (
	// TSSKeyGenMsg is the message directly generated by tss-lib package
	TSSKeyGenMsg TssMsgType = iota
	// TSSKeySignMsg is the message directly generated by tss lib for sign
	TSSKeySignMsg
	// TSSKeyGenVerMsg is the message we create on top to make sure everyone received the same message
	TSSKeyGenVerMsg
	// TSSKeySignVerMsg is the message we create to make sure every party receive the same broadcast message
	TSSKeySignVerMsg
	// TSSControlMsg is the message we create to exchange Tss share
	TSSControlMsg
	// TSSTaskDone is the message of Tss process notification
	TSSTaskDone
	// TssUnknown is the message indicates the undefined message type
	TssUnknown
)

type WireMessage struct {
	MsgID   string     `json:"msg_id"`
	MsgType TssMsgType `json:"msg_type"`
	MsgData []byte     `json:"msg_data"`
}

// TaskMessage pb.Message_TSS_KEY_GEN, pb.Message_TSS_KEY_SIGN
// TaskMessage the message that produced by tss-lib package
type TaskMessage struct {
	Routing   *btss.MessageRouting `json:"routing"`
	RoundInfo string               `json:"round_info"`
	Message   []byte               `json:"message"`
	Sig       []byte               `json:"signature"`
}

// BroadcastConfirmMessage type: pb.Message_TSS_KEY_GEN_VER, pb.Message_TSS_KEY_SIGN_VER
// BroadcastConfirmMessage is used to broadcast to all parties what message they receive
type BroadcastConfirmMessage struct {
	FromID string `json:"from_id"`
	Key    string `json:"key"`
	Hash   string `json:"hash"`
}

// TssControl pb.Message_TSS_CONTROL
type TssControl struct {
	FromID      string       `json:"from_id"`
	ReqHash     string       `json:"reqest_hash"`
	ReqKey      string       `json:"request_key"`
	RequestType TssMsgType   `json:"request_type"`
	Msg         *TaskMessage `json:"message_body"`
}

// TssTaskNotifier pb.Message_TSS_TASK_DONE
type TssTaskNotifier struct {
	FromID   string `json:"from_id"`
	TaskDone bool   `json:"task_done"`
}

// GetCacheKey return the key we used to cache it locally
func (m *TaskMessage) GetCacheKey() string {
	return fmt.Sprintf("%s-%s", m.Routing.From.Id, m.RoundInfo)
}
